fun main(args: Array<String>) {
//    println(solution(5, intArrayOf(10, 6, 8, 4, 7, 5, 4, 4, 5, 3, 2, 1)))
    println(solution(5, intArrayOf(1, 3, 1, 4, 2, 3, 5, 4)))
}

fun solution(X: Int, A: IntArray): Int {
    /**
     * 작은 개구리는 강 건너편으로 가고 싶어합니다.
     * 개구리는 처음에 강의 한쪽 강둑(위치 0)에 있으며 반대쪽 강둑(위치 X+1)으로 이동하려고 합니다.
     * 나뭇잎은 나무에서 강 표면으로 떨어집니다.
     *
     * 떨어지는 잎을 나타내는 N개의 정수로 구성된 배열 A가 제공됩니다.
     * A[K]는 초 단위로 측정된 시간 K에서 한 잎이 떨어지는 위치를 나타냅니다.
     *
     * 목표는 개구리가 강의 반대편으로 점프할 수 있는 가장 빠른 시간을 찾는 것입니다.
     * 개구리는 강 건너 1부터 X까지의 모든 위치에 나뭇잎이 나타날 때만 횡단할 수 있습니다
     * (즉, 1에서 X까지의 모든 위치가 나뭇잎으로 덮인 가장 빠른 순간을 찾고 싶습니다).
     * 강의 흐름 속도는 무시할 수 있을 정도로 작다고 가정할 수 있습니다.
     * 즉, 잎이 강에 떨어지면 위치가 바뀌지 않습니다.
     */

    val set = HashSet<Int>()
    for (i in A.indices) {
        if (A[i] == X) {
            return i
        }
    }
    return -1
}

fun solution() {

}
